package ####PACKAGE####.####TEMPLATETYPE1####.####TEMPLATESTATUS1####

import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import ####ENTITYPATH####;
import ####PACKAGE####.####INJECTTYPE1####.####ENTITY########INJECTTYPE0####;
import ####PACKAGE####.####TEMPLATETYPE1####.####ENTITY########TEMPLATETYPE0####;
import com.querydsl.core.types.Predicate;

import lombok.NonNull;

@Service("####ENTITYSMALLCAPITAL########TEMPLATETYPE0####")
public class ####ENTITY########TEMPLATETYPE0########TEMPLATESTATUS0#### extends BaseAbstractServiceImpl implements ####ENTITY########TEMPLATETYPE0#### {

	@Autowired
	private ####ENTITY########INJECTTYPE0#### ####ENTITYSMALLCAPITAL########INJECTTYPE0####;

	@Override
	####ENTITY#### create(####ENTITY#### ####ENTITYSMALLCAPITAL####) {
		return ####ENTITYSMALLCAPITAL########INJECTTYPE0####.save(####ENTITYSMALLCAPITAL####);
	}

	@Override
	Order update(Order order) {
		####ENTITY#### original####ENTITY#### = ####ENTITYSMALLCAPITAL########INJECTTYPE0####.findOne(####ENTITYSMALLCAPITAL####.getId();
		BeanUtils.copyProperties(####ENTITYSMALLCAPITAL####, original####ENTITY####);
		####ENTITYSMALLCAPITAL########INJECTTYPE0####.save(original####ENTITY####);
	}

	@Override
	@Transactional
	long delete(Long... ids) {
		####ENTITYSMALLCAPITAL########INJECTTYPE0####.deleteByIds(ids);
	}

	@Override
	Order findById(Long id) {
		return ####ENTITYSMALLCAPITAL########INJECTTYPE0####.findOne(id);
	}

	@Override
	@Transactional(readOnly = true)
	List<####ENTITY####> findAll() {
		return ####ENTITYSMALLCAPITAL########INJECTTYPE0####.findAll();
	}

	@Override
	@Transactional(readOnly = true)
	Page<####ENTITY####> findAll(Pageable pageable) {
		return ####ENTITYSMALLCAPITAL########INJECTTYPE0####.findAll(pageable);
	}

	@Override
	@Transactional(readOnly = true)
	Page<####ENTITY####> findAll(Pageable pageable, Predicate predicate) {
		return ####ENTITYSMALLCAPITAL########INJECTTYPE0####.findAll(predicate, pageable);
	}
}