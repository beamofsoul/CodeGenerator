package ####PACKAGE####.####TEMPLATETYPE1####

import static com.beamofsoul.springboot.management.util.JSONUtils.newInstance;

import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSONObject;
import ####ENTITYPATH####;
import com.beamofsoul.springboot.management.util.CommonConvertUtils;
import com.beamofsoul.springboot.management.util.PageUtils;
import ####PACKAGE####.####INJECTTYPE1####.####ENTITY########INJECTTYPE0####;

@Controller
@RequestMapping("/admin/####ENTITYSMALLCAPITAL####")
public class ####ENTITY########TEMPLATETYPE0#### extends BaseAbstractController {

	@Resource
	private ####ENTITY########INJECTTYPE0#### ####ENTITYSMALLCAPITAL########INJECTTYPE0####;
	
	@PreAuthorize("authenticated and hasPermission('####ENTITYSMALLCAPITAL####','####ENTITYSMALLCAPITAL####:list')")
	@RequestMapping(value = "/adminList")
	public String adminList() {
		return "/####ENTITYSMALLCAPITAL####/admin_####ENTITYSMALLCAPITAL####_list";
	}
	
	@PreAuthorize("authenticated and hasPermission('####ENTITYSMALLCAPITAL####','####ENTITYSMALLCAPITAL####:add')")
	@RequestMapping(value = "/singleAdd", method = RequestMethod.POST)
	@ResponseBody
	public JSONObject addSingle(@RequestBody ####ENTITY#### ####ENTITYSMALLCAPITAL####) {
		return newInstance("created",####ENTITYSMALLCAPITAL########INJECTTYPE0####.create(####ENTITYSMALLCAPITAL####));
	}
	
	@PreAuthorize("authenticated and hasPermission('####ENTITYSMALLCAPITAL####','####ENTITYSMALLCAPITAL####:list')")
	@RequestMapping(value = "####ENTITYSMALLCAPITAL####sByPage", method = RequestMethod.POST, produces = PRODUCES_APPLICATION_JSON)
	@ResponseBody
	public JSONObject getPageable####ENTITY####s(@RequestBody Map<String, Object> map) {
		return newInstance(####ENTITYSMALLCAPITAL########INJECTTYPE0####.findAll(PageUtils.parsePageable(map)));
	}
	
	@RequestMapping(value = "single", method = RequestMethod.POST, produces = PRODUCES_APPLICATION_JSON)
	@ResponseBody
	public JSONObject getSingleJSONObject(@RequestBody Map<String, Object> map) {
		return newInstance("obj",####ENTITYSMALLCAPITAL########INJECTTYPE0####.findById(Long.valueOf(map.get("id").toString())));
	}
	
	@PreAuthorize("authenticated and hasPermission('####ENTITYSMALLCAPITAL####','####ENTITYSMALLCAPITAL####:update')")
	@RequestMapping(value = "singleUpdate", method = RequestMethod.POST)
	@ResponseBody
	public JSONObject updateSingle(@RequestBody ####ENTITY#### ####ENTITYSMALLCAPITAL####) {
		return newInstance("updated",####ENTITYSMALLCAPITAL########INJECTTYPE0####.update(####ENTITYSMALLCAPITAL####));
	}
	
	@PreAuthorize("authenticated and hasPermission('####ENTITYSMALLCAPITAL####','####ENTITYSMALLCAPITAL####:delete')")
	@RequestMapping(value = "/delete", method = RequestMethod.DELETE)
	@ResponseBody
	public JSONObject delete(@RequestBody String ids) {
		return newInstance("count",####ENTITYSMALLCAPITAL########INJECTTYPE0####
				.delete(CommonConvertUtils.convertToLongArray(ids)));
	}
}